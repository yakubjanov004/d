from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from typing import List, Dict, Any


def get_contact_keyboard(lang="uz"):
    share_contact_text = "üì± Kontakt ulashish" if lang == "uz" else "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=share_contact_text, request_contact=True)]],
        resize_keyboard=True
    )
    return keyboard

def get_client_main_menu(lang="uz"):
    service_order_text = "üîß Texnik xizmat" if lang == "uz" else "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞"
    connection_order_text = "üîå Ulanish uchun ariza" if lang == "uz" else "üîå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
    smart_service_text = "üõú Smart Service" if lang == "uz" else "üõú Smart Service"
    contact_operator_text = "üìû Operator bilan bog'lanish" if lang == "uz" else "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
    cabinet_text = "üë§ Kabinet" if lang == "uz" else "üë§ –ö–∞–±–∏–Ω–µ—Ç"
    bot_guide_text = "üìÑ Bot qo'llanmasi" if lang == "uz" else " üìÑ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"
    change_language_text = "üåê Tilni o'zgartirish" if lang == "uz" else "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
    
    buttons = [
        [
            KeyboardButton(text=connection_order_text),
            KeyboardButton(text=service_order_text)    
        ],
        [
            KeyboardButton(text=smart_service_text)
        ],
        [
            KeyboardButton(text=contact_operator_text),
            KeyboardButton(text=cabinet_text)
        ],
        [
            KeyboardButton(text=bot_guide_text),
            KeyboardButton(text=change_language_text)
        ]
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    return keyboard

def zayavka_type_keyboard(lang="uz"):
    """Zayavka turini tanlash klaviaturasi - 2 tilda"""
    person_physical_text = "üë§ Jismoniy shaxs" if lang == "uz" else "üë§ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"
    person_legal_text = "üè¢ Yuridik shaxs" if lang == "uz" else "üè¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=person_physical_text, callback_data="zayavka_type_b2c")],
            [InlineKeyboardButton(text=person_legal_text, callback_data="zayavka_type_b2b")]
        ]
    )
    return keyboard

def media_attachment_keyboard(lang="uz"):
    """Media biriktirish klaviaturasi - 2 tilda"""
    yes_text = "‚úÖ Ha" if lang == "uz" else "‚úÖ –î–∞"
    no_text = "‚ùå Yo'q" if lang == "uz" else "‚ùå –ù–µ—Ç"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=yes_text, callback_data="attach_media_yes")],
        [InlineKeyboardButton(text=no_text, callback_data="attach_media_no")]
    ])
    return keyboard

def geolocation_keyboard(lang="uz"):
    """Geolokatsiya klaviaturasi - 2 tilda"""
    yes_text = "‚úÖ Ha" if lang == "uz" else "‚úÖ –î–∞"
    no_text = "‚ùå Yo'q" if lang == "uz" else "‚ùå –ù–µ—Ç"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=yes_text, callback_data="send_location_yes")],
        [InlineKeyboardButton(text=no_text, callback_data="send_location_no")]
    ])
    return keyboard

def confirmation_keyboard(lang="uz"):
    """Tasdiqlash klaviaturasi - 2 tilda"""
    confirm_text = "‚úÖ Tasdiqlash" if lang == "uz" else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    resend_text = "üîÑ Qayta yuborish" if lang == "uz" else "üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=confirm_text, callback_data="confirm_zayavka"),
            InlineKeyboardButton(text=resend_text, callback_data="resend_zayavka")
        ]
    ])
    return keyboard

# --- New Tariff Plans ---
B2C_PLANS = [
    {"name": "Oddiy-20", "price": "110,000", "speed_day": "20", "speed_night": "20", "tasix": "20", "reg": "75,000"},
    {"name": "Oddiy-50", "price": "130,000", "speed_day": "50", "speed_night": "50", "tasix": "50", "reg": "75,000"},
    {"name": "Oddiy-100", "price": "160,000", "speed_day": "100", "speed_night": "100", "tasix": "100", "reg": "75,000"},
    {"name": "XIT-200", "price": "200,000", "speed_day": "200", "speed_night": "200", "tasix": "200", "reg": "75,000"},
    {"name": "VIP-500", "price": "500,000", "speed_day": "500", "speed_night": "500", "tasix": "500", "reg": "0"},
    {"name": "PREMIUM", "price": "1,000,000", "speed_day": "1,000", "speed_night": "1,000", "tasix": "1,000", "reg": "0"},
]

BIZNET_PRO_PLANS = [
    {"name": "BizNET-Pro-1", "price": "600,000", "speed": "7", "tasix": "100"},
    {"name": "BizNET-Pro-2", "price": "700,000", "speed": "10", "tasix": "100"},
    {"name": "BizNET-Pro-3", "price": "1,200,000", "speed": "20", "tasix": "100"},
    {"name": "BizNET-Pro-4", "price": "1,500,000", "speed": "30", "tasix": "100"},
    {"name": "BizNET-Pro-5", "price": "1,800,000", "speed": "40", "tasix": "100"},
    {"name": "BizNET-Pro-6", "price": "2,000,000", "speed": "60", "tasix": "100"},
    {"name": "BizNET-Pro-7+", "price": "3,000,000", "speed": "100", "tasix": "100"},
]

TIJORAT_PLANS = [
    {"name": "Tijorat-1", "price": "320,000", "speed_day": "6", "speed_night": "2", "tasix": "100"},
    {"name": "Tijorat-2", "price": "360,000", "speed_day": "10", "speed_night": "3", "tasix": "100"},
    {"name": "Tijorat-3", "price": "480,000", "speed_day": "20", "speed_night": "6", "tasix": "100"},
    {"name": "Tijorat-4", "price": "800,000", "speed_day": "40", "speed_night": "12", "tasix": "100"},
    {"name": "Tijorat-5", "price": "1,120,000", "speed_day": "60", "speed_night": "20", "tasix": "100"},
    {"name": "Tijorat-100", "price": "1,760,000", "speed_day": "100", "speed_night": "50", "tasix": "100"},
    {"name": "Tijorat-300", "price": "5,280,000", "speed_day": "300", "speed_night": "150", "tasix": "300"},
    {"name": "Tijorat-500", "price": "8,800,000", "speed_day": "500", "speed_night": "300", "tasix": "500"},
    {"name": "Tijorat-1000", "price": "14,850,000", "speed_day": "1,000", "speed_night": "700", "tasix": "1,000"},
]

def get_client_tariff_selection_keyboard(connection_type: str, lang: str = 'uz') -> InlineKeyboardMarkup:
    """Tariff selection keyboard for client"""
    
    back_text = "‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    
    if connection_type == "b2c":
        # B2C plans - 2 per row
        keyboard = []
        for i in range(0, len(B2C_PLANS), 2):
            row = []
            row.append(InlineKeyboardButton(
                text=f"{B2C_PLANS[i]['name']} - {B2C_PLANS[i]['price']} so'm", 
                callback_data=f"b2c_plan_{i}"
            ))
            if i+1 < len(B2C_PLANS):
                row.append(InlineKeyboardButton(
                    text=f"{B2C_PLANS[i+1]['name']} - {B2C_PLANS[i+1]['price']} so'm", 
                    callback_data=f"b2c_plan_{i+1}"
                ))
            keyboard.append(row)
        # Add back button for B2C
        keyboard.append([InlineKeyboardButton(text=back_text, callback_data="back_to_connection_type")])
    else:
        # B2B - show BizNET-Pro and Tijorat options (side by side)
        keyboard = [
            [InlineKeyboardButton(text="BizNET-Pro", callback_data="biznet_select")],
            [InlineKeyboardButton(text="Tijorat", callback_data="tijorat_select")]
        ]
        # Add back button for B2B
        keyboard.append([InlineKeyboardButton(text=back_text, callback_data="back_to_connection_type")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_biznet_tariff_keyboard(lang: str = 'uz') -> InlineKeyboardMarkup:
    """BizNET-Pro tariff selection keyboard"""
    keyboard = []
    # 2 buttons per row
    for i in range(0, len(BIZNET_PRO_PLANS), 2):
        row = []
        row.append(InlineKeyboardButton(
            text=f"{BIZNET_PRO_PLANS[i]['name']} - {BIZNET_PRO_PLANS[i]['price']} so'm", 
            callback_data=f"biznet_plan_{i}"
        ))
        if i+1 < len(BIZNET_PRO_PLANS):
            row.append(InlineKeyboardButton(
                text=f"{BIZNET_PRO_PLANS[i+1]['name']} - {BIZNET_PRO_PLANS[i+1]['price']} so'm", 
                callback_data=f"biznet_plan_{i+1}"
            ))
        keyboard.append(row)
    
    back_text = "‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text=back_text, callback_data="back_to_tariff_selection")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_tijorat_tariff_keyboard(lang: str = 'uz') -> InlineKeyboardMarkup:
    """Tijorat tariff selection keyboard"""
    keyboard = []
    # 2 buttons per row
    for i in range(0, len(TIJORAT_PLANS), 2):
        row = []
        row.append(InlineKeyboardButton(
            text=f"{TIJORAT_PLANS[i]['name']} - {TIJORAT_PLANS[i]['price']} so'm", 
            callback_data=f"tijorat_plan_{i}"
        ))
        if i+1 < len(TIJORAT_PLANS):
            row.append(InlineKeyboardButton(
                text=f"{TIJORAT_PLANS[i+1]['name']} - {TIJORAT_PLANS[i+1]['price']} so'm", 
                callback_data=f"tijorat_plan_{i+1}"
            ))
        keyboard.append(row)
    
    back_text = "‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text=back_text, callback_data="back_to_tariff_selection")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_client_regions_keyboard(lang: str = 'uz') -> InlineKeyboardMarkup:
    """Regions selection keyboard for client (UZ/RU labels, stable callback_data)."""

    labels_uz = {
        "toshkent_city": "Toshkent shahri",
        "toshkent_region": "Toshkent viloyati",
        "andijon": "Andijon",
        "fergana": "Farg'ona",
        "namangan": "Namangan",
        "sirdaryo": "Sirdaryo",
        "jizzax": "Jizzax",
        "samarkand": "Samarqand",
        "bukhara": "Buxoro",
        "navoi": "Navoiy",
        "kashkadarya": "Qashqadaryo",
        "surkhandarya": "Surxondaryo",
        "khorezm": "Xorazm",
        "karakalpakstan": "Qoraqalpog'iston",
    }

    labels_ru = {
        "toshkent_city": "–≥. –¢–∞—à–∫–µ–Ω—Ç",
        "toshkent_region": "–¢–∞—à–∫–µ–Ω—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "andijon": "–ê–Ω–¥–∏–∂–∞–Ω",
        "fergana": "–§–µ—Ä–≥–∞–Ω–∞",
        "namangan": "–ù–∞–º–∞–Ω–≥–∞–Ω",
        "sirdaryo": "–°—ã—Ä–¥–∞—Ä—å—è",
        "jizzax": "–î–∂–∏–∑–∞–∫",
        "samarkand": "–°–∞–º–∞—Ä–∫–∞–Ω–¥",
        "bukhara": "–ë—É—Ö–∞—Ä–∞",
        "navoi": "–ù–∞–≤–æ–∏",
        "kashkadarya": "–ö–∞—à–∫–∞–¥–∞—Ä—å—è",
        "surkhandarya": "–°—É—Ä—Ö–∞–Ω–¥–∞—Ä—å—è",
        "khorezm": "–•–æ—Ä–µ–∑–º",
        "karakalpakstan": "–ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω",
    }

    L = labels_ru if lang == 'ru' else labels_uz

    rows = [
        [("toshkent_city",), ("toshkent_region",)],
        [("andijon",), ("fergana",)],
        [("namangan",), ("sirdaryo",)],
        [("jizzax",), ("samarkand",)],
        [("bukhara",), ("navoi",)],
        [("kashkadarya",), ("surkhandarya",)],
        [("khorezm",), ("karakalpakstan",)],
    ]

    keyboard = []
    for row in rows:
        keyboard.append([
            InlineKeyboardButton(
                text=L[key],
                callback_data=f"region_{key}"
            ) for (key,) in row
        ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_contact_options_keyboard(lang: str = "uz"):

    call_text = "üìû Qo'ng'iroq qilish" if lang == "uz" else "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å"
    chat_text = "üí¨ Onlayn chat" if lang == "uz" else "üí¨ –û–Ω–ª–∞–π–Ω-—á–∞—Ç"
    back_text = "‚óÄÔ∏è Orqaga" if lang == "uz" else "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    
    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=call_text)],
            [KeyboardButton(text=chat_text, web_app=WebAppInfo(url="https://webapp-gamma-three.vercel.app/"))],
            [KeyboardButton(text=back_text)],
        ],
        resize_keyboard=True,
    )

    return reply_keyboard

def get_client_profile_reply_keyboard(lang: str = 'uz') -> ReplyKeyboardMarkup:
    """Reply keyboard for client profile (cabinet) section"""
    view_info_text = "üëÄ Ma'lumotlarni ko'rish" if lang == 'uz' else "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    view_orders_text = "üìã Mening arizalarim" if lang == 'uz' else "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"
    edit_name_text = "‚úèÔ∏è Ismni o'zgartirish" if lang == 'uz' else "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"
    back_text = "‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥"

    keyboard = [
        [KeyboardButton(text=view_info_text)],
        [KeyboardButton(text=view_orders_text)],
        [KeyboardButton(text=edit_name_text)],
        [KeyboardButton(text=back_text)],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_smart_service_categories_keyboard(lang: str = "uz") -> InlineKeyboardMarkup:
    """Smart Service kategoriyalarini tanlash klaviaturasi - 2 tilda"""
    if lang == "uz":
        keyboard = [
            [InlineKeyboardButton(text="üè† Aqlli uy va avtomatlashtirilgan xizmatlar", callback_data="cat_smart_home")],
            [InlineKeyboardButton(text="üîí Xavfsizlik va kuzatuv tizimlari", callback_data="cat_security")],
            [InlineKeyboardButton(text="üåê Internet va tarmoq xizmatlari", callback_data="cat_internet")],
            [InlineKeyboardButton(text="‚ö° Energiya va yashil texnologiyalar", callback_data="cat_energy")],
            [InlineKeyboardButton(text="üì∫ Multimediya va aloqa tizimlari", callback_data="cat_multimedia")],
            [InlineKeyboardButton(text="üîß Maxsus va qo'shimcha xizmatlar", callback_data="cat_special")],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text="üè† –£–º–Ω—ã–π –¥–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", callback_data="cat_smart_home")],
            [InlineKeyboardButton(text="üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", callback_data="cat_security")],
            [InlineKeyboardButton(text="üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Å–µ—Ç–∏", callback_data="cat_internet")],
            [InlineKeyboardButton(text="‚ö° –≠–Ω–µ—Ä–≥–∏—è –∏ –∑–µ–ª—ë–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="cat_energy")],
            [InlineKeyboardButton(text="üì∫ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", callback_data="cat_multimedia")],
            [InlineKeyboardButton(text="üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏ –¥–æ–ø. —É—Å–ª—É–≥–∏", callback_data="cat_special")],
        ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# Old label dictionaries were removed; buttons are now defined inline per language



def get_smart_service_types_keyboard(category_key: str, lang: str = "uz") -> InlineKeyboardMarkup:
    """Tanlangan kategoriya bo'yicha service type klaviaturasi - 2 tilda"""
    if lang == "uz":
        uz_services_map = {
            "cat_smart_home": [
                ("Aqlli uy tizimlarini o'rnatish va sozlash", "srv_smart_home_setup"),
                ("Aqlli yoritish (Smart Lighting) tizimlari", "srv_smart_lighting"),
                ("Aqlli termostat va iqlim nazarati", "srv_smart_thermostat"),
                ("Smart Lock ‚Äî internet orqali boshqariladigan qulflar", "srv_smart_lock"),
                ("Aqlli rozetalar va energiya monitoringi", "srv_smart_outlets"),
                ("Uyni masofadan boshqarish qurilmalari", "srv_remote_control"),
                ("Aqlli pardalar va jaluzlar", "srv_smart_curtains"),
                ("Aqlli maishiy texnika integratsiyasi", "srv_appliance_integration"),
            ],
            "cat_security": [
                ("Videokuzatuv kameralarini o'rnatish (IP/analog)", "srv_cctv_cameras"),
                ("Kamera arxiv tizimlari, bulutli saqlash", "srv_camera_storage"),
                ("Domofon tizimlari", "srv_intercom"),
                ("Xavfsizlik signalizatsiyasi va sensorlar", "srv_security_alarm"),
                ("Yong'in signalizatsiyasi tizimlari", "srv_fire_alarm"),
                ("Gaz sizishi/suv toshqiniga qarshi tizimlar", "srv_gas_flood_protection"),
                ("Yuzni tanish (Face Recognition) tizimlari", "srv_face_recognition"),
                ("Avtomatik eshik/darvoza boshqaruvi", "srv_automatic_gates"),
            ],
            "cat_internet": [
                ("Wi-Fi tarmoqlarini o'rnatish va sozlash", "srv_wifi_setup"),
                ("Wi-Fi qamrovini kengaytirish (Access Point)", "srv_wifi_extender"),
                ("Mobil aloqa signalini kuchaytirish (Repeater)", "srv_signal_booster"),
                ("Ofis/uy uchun lokal tarmoq (LAN) qurish", "srv_lan_setup"),
                ("Internet provayder xizmatlarini ulash", "srv_internet_provider"),
                ("Server va NAS qurilmalarini o'rnatish", "srv_server_nas"),
                ("Bulutli fayl almashish va zaxira", "srv_cloud_storage"),
                ("VPN va xavfsiz ulanishlar", "srv_vpn_setup"),
            ],
            "cat_energy": [
                ("Quyosh panellarini o'rnatish va ulash", "srv_solar_panels"),
                ("Quyosh batareyalari bilan energiya saqlash", "srv_solar_batteries"),
                ("Shamol generatorlarini o'rnatish", "srv_wind_generators"),
                ("Energiya tejamkor yoritish tizimlari", "srv_energy_saving_lighting"),
                ("Avtomatik sug'orish (Smart Irrigation)", "srv_smart_irrigation"),
            ],
            "cat_multimedia": [
                ("Smart TV o'rnatish va ulash", "srv_smart_tv"),
                ("Uy kinoteatri tizimlari", "srv_home_cinema"),
                ("Audio tizimlar (multiroom)", "srv_multiroom_audio"),
                ("IP-telefoniya, mini-ATS", "srv_ip_telephony"),
                ("Video konferensiya tizimlari", "srv_video_conference"),
                ("Interaktiv taqdimot (proyektor/LED)", "srv_presentation_systems"),
            ],
            "cat_special": [
                ("Aqlli ofis tizimlari", "srv_smart_office"),
                ("Data-markaz (Server room) loyihalash va montaj", "srv_data_center"),
                ("Qurilma/tizimlar uchun texnik xizmat", "srv_technical_support"),
                ("Dasturiy ta'minotni o'rnatish/yangilash", "srv_software_install"),
                ("IoT qurilmalarini integratsiya qilish", "srv_iot_integration"),
                ("Masofaviy boshqaruv tizimlari", "srv_remote_management"),
                ("Sun'iy intellekt asosidagi boshqaruv", "srv_ai_management"),
            ],
        }
        services = uz_services_map.get(category_key, [])
    else:
        ru_services_map = {
            "cat_smart_home": [
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –¥–æ–º–∞", "srv_smart_home_setup"),
                ("–£–º–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (Smart Lighting)", "srv_smart_lighting"),
                ("–£–º–Ω—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç –∏ –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å", "srv_smart_thermostat"),
                ("Smart Lock ‚Äî —É–º–Ω—ã–π –∑–∞–º–æ–∫ (—á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)", "srv_smart_lock"),
                ("–£–º–Ω—ã–µ —Ä–æ–∑–µ—Ç–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–Ω–µ—Ä–≥–∏–∏", "srv_smart_outlets"),
                ("–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ–º", "srv_remote_control"),
                ("–£–º–Ω—ã–µ —à—Ç–æ—Ä—ã –∏ –∂–∞–ª—é–∑–∏", "srv_smart_curtains"),
                ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–º–Ω–æ–π –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏", "srv_appliance_integration"),
            ],
            "cat_security": [
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è (IP/–∞–Ω–∞–ª–æ–≥)", "srv_cctv_cameras"),
                ("–ê—Ä—Ö–∏–≤ –∏ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ", "srv_camera_storage"),
                ("–î–æ–º–æ—Ñ–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", "srv_intercom"),
                ("–û—Ö—Ä–∞–Ω–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–∞—Ç—á–∏–∫–∏", "srv_security_alarm"),
                ("–ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "srv_fire_alarm"),
                ("–°–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç —É—Ç–µ—á–∫–∏ –≥–∞–∑–∞/–ø–æ—Ç–æ–ø–∞", "srv_gas_flood_protection"),
                ("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü (Face Recognition)", "srv_face_recognition"),
                ("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–≤–µ—Ä–∏/–≤–æ—Ä–æ—Ç–∞", "srv_automatic_gates"),
            ],
            "cat_internet": [
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Wi-Fi", "srv_wifi_setup"),
                ("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è Wi-Fi (Access Point)", "srv_wifi_extender"),
                ("–£—Å–∏–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏ (Repeater)", "srv_signal_booster"),
                ("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (LAN)", "srv_lan_setup"),
                ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞", "srv_internet_provider"),
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ NAS", "srv_server_nas"),
                ("–û–±–º–µ–Ω —Ñ–∞–π–ª–∞–º–∏ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±–ª–∞–∫–µ", "srv_cloud_storage"),
                ("VPN –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", "srv_vpn_setup"),
            ],
            "cat_energy": [
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π", "srv_solar_panels"),
                ("–•—Ä–∞–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ—è—Ö", "srv_solar_batteries"),
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤", "srv_wind_generators"),
                ("–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ", "srv_energy_saving_lighting"),
                ("–ê–≤—Ç–æ–ø–æ–ª–∏–≤ (Smart Irrigation)", "srv_smart_irrigation"),
            ],
            "cat_multimedia": [
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Smart TV", "srv_smart_tv"),
                ("–î–æ–º–∞—à–Ω–∏–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "srv_home_cinema"),
                ("–ê—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã (multiroom)", "srv_multiroom_audio"),
                ("IP-—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è, –º–∏–Ω–∏-–ê–¢–°", "srv_ip_telephony"),
                ("–°–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π", "srv_video_conference"),
                ("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (–ø—Ä–æ–µ–∫—Ç–æ—Ä/LED)", "srv_presentation_systems"),
            ],
            "cat_special": [
                ("–°–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞", "srv_smart_office"),
                ("–î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä (Server room): –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω—Ç–∞–∂", "srv_data_center"),
                ("–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤/—Å–∏—Å—Ç–µ–º", "srv_technical_support"),
                ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û", "srv_software_install"),
                ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤", "srv_iot_integration"),
                ("–°–∏—Å—Ç–µ–º—ã —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "srv_remote_management"),
                ("AI-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ–º/–æ—Ñ–∏—Å–æ–º", "srv_ai_management"),
            ],
        }
        services = ru_services_map.get(category_key, [])

    # Single-button per row for better readability
    keyboard = [[InlineKeyboardButton(text=text, callback_data=cb)] for text, cb in services]

    back_text = "‚¨ÖÔ∏è Orqaga" if lang == "uz" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text=back_text, callback_data="back_to_categories")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_smart_service_confirmation_keyboard(lang="uz"):
    """Smart Service tasdiqlash klaviaturasi - 2 tilda"""
    confirm_text = "‚úÖ Tasdiqlash" if lang == "uz" else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    cancel_text = "‚ùå Bekor qilish" if lang == "uz" else "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=confirm_text, callback_data="confirm_smart_service"),
            InlineKeyboardButton(text=cancel_text, callback_data="cancel_smart_service")
        ]
    ])
    return keyboard

def get_rating_keyboard(request_id: int, request_type: str) -> InlineKeyboardMarkup:
    """
    Reyting keyboard yaratish (1-5 yulduz)
    """
    keyboard = []
    
    # Yulduzlar qatorlari
    for i in range(1, 6):
        stars_text = "‚≠ê" * i
        keyboard.append([
            InlineKeyboardButton(
                text=stars_text,
                callback_data=f"rate:{request_id}:{request_type}:{i}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_skip_comment_keyboard(request_id: int, request_type: str, lang: str = "uz") -> InlineKeyboardMarkup:
    """
    Izoh o'tkazib yuborish keyboard
    """
    skip_text = "O'tkazib yuborish" if lang == "uz" else "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=skip_text,
                callback_data=f"skip_comment:{request_id}:{request_type}"
            )
        ]
    ])
    return keyboard
