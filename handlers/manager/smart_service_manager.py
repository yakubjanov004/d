# handlers/manager/smart_service.py
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
import html
import logging

from database.basic.user import get_user_by_telegram_id
from database.basic.language import get_user_language
from database.basic.smart_service import fetch_smart_service_orders
from filters.role_filter import RoleFilter
from keyboards.manager_buttons import get_manager_main_menu

router = Router()
logger = logging.getLogger(__name__)
router.message.filter(RoleFilter("manager"))

# -----------------------------
# üî§ I18N (UZ/RU tarjimalar)
# -----------------------------
T = {
    "title": {
        "uz": "üéØ <b>SMART SERVICE ARIZALARI</b>",
        "ru": "üéØ <b>–ó–ê–Ø–í–ö–ò SMART SERVICE</b>",
    },
    "order": {"uz": "üìã <b>Buyurtma:</b>", "ru": "üìã <b>–ó–∞—è–≤–∫–∞:</b>"},
    "category": {"uz": "üè∑Ô∏è <b>Kategoriya:</b>", "ru": "üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b>"},
    "service": {"uz": "üîß <b>Xizmat:</b>", "ru": "üîß <b>–°–µ—Ä–≤–∏—Å:</b>"},
    "client": {"uz": "üë§ <b>Mijoz:</b>", "ru": "üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>"},
    "phone": {"uz": "üìû <b>Telefon:</b>", "ru": "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>"},
    "username": {"uz": "üë§ Username:", "ru": "üë§ Username:"},  # Username o'zgarmaydi
    "address": {"uz": "üìç <b>Manzil:</b>", "ru": "üìç <b>–ê–¥—Ä–µ—Å:</b>"},
    "gps": {"uz": "üìç GPS:", "ru": "üìç GPS:"},
    "date": {"uz": "üìÖ <b>Sana:</b>", "ru": "üìÖ <b>–î–∞—Ç–∞:</b>"},
    "item_idx": {"uz": "üìÑ <b>Ariza:</b>", "ru": "üìÑ <b>–ó–∞—è–≤–∫–∞:</b>"},
    "empty_title": {
        "uz": "üõú <b>SmartService Arizalari</b>",
        "ru": "üõú <b>–ó–∞—è–≤–∫–∏ SmartService</b>",
    },
    "empty_body": {"uz": "Hozircha arizalar yo'q.", "ru": "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."},
    "prev": {"uz": "‚¨ÖÔ∏è Oldingi", "ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"},
    "next": {"uz": "Keyingi ‚û°Ô∏è", "ru": "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è"},
    "close": {"uz": "‚ùå Yopish", "ru": "‚ùå –ó–∞–∫—Ä—ã—Ç—å"},
    "closed_toast": {"uz": "Yopildi", "ru": "–ó–∞–∫—Ä—ã—Ç–æ"},
}

# Kategoriya nomlari ‚Äî ikki tilda
CATEGORY_NAMES = {
    "aqlli_avtomatlashtirilgan_xizmatlar": {
        "uz": "üè† Aqlli uy va avtomatlashtirilgan xizmatlar",
        "ru": "üè† –£–º–Ω—ã–π –¥–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã",
    },
    "xavfsizlik_kuzatuv_tizimlari": {
        "uz": "üîí Xavfsizlik va kuzatuv tizimlari",
        "ru": "üîí –°–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è",
    },
    "internet_tarmoq_xizmatlari": {
        "uz": "üåê Internet va tarmoq xizmatlari",
        "ru": "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Å–µ—Ç–µ–≤—ã–µ —É—Å–ª—É–≥–∏",
    },
    "energiya_yashil_texnologiyalar": {
        "uz": "‚ö° Energiya va yashil texnologiyalar",
        "ru": "‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∏ –∑–µ–ª—ë–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    },
    "multimediya_aloqa_tizimlari": {
        "uz": "üì∫ Multimediya va aloqa tizimlari",
        "ru": "üì∫ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
    },
    "maxsus_qoshimcha_xizmatlar": {
        "uz": "üîß Maxsus va qo'shimcha xizmatlar",
        "ru": "üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
    },
}

# -----------------------------
# üîß Util funksiyalar
# -----------------------------
def normalize_lang(value: str | None) -> str:
    """DB qiymatini barqaror 'uz' yoki 'ru' ga keltiradi."""
    if not value:
        return "uz"
    v = value.strip().lower()
    if v in {"ru", "rus", "russian", "ru-ru", "ru_ru"}:
        return "ru"
    if v in {"uz", "uzb", "uzbek", "o'z", "oz", "uz-uz", "uz_uz"}:
        return "uz"
    return "uz"

def t(lang: str, key: str) -> str:
    """Tarjima helperi."""
    lang = normalize_lang(lang)
    return T.get(key, {}).get(lang, T.get(key, {}).get("uz", key))

def cat_name(lang: str, code: str) -> str:
    """Kategoriya kodini (uz/ru) nomiga aylantirish; topilmasa, kodni chiroyli formatlaydi."""
    lang = normalize_lang(lang)
    data = CATEGORY_NAMES.get(code)
    if data:
        return data.get(lang) or data.get("uz")
    # fallback: kod -> Title Case
    return (code or "-").replace("_", " ").title()

# Service type nomlari - database value dan UI label ga
SERVICE_TYPE_LABELS = {
    # Smart Home
    "aqlli_uy_tizimlarini_ornatish_sozlash": {
        "uz": "Aqlli uy tizimlarini o'rnatish va sozlash",
        "ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –¥–æ–º–∞",
    },
    "aqlli_yoritish_smart_lighting_tizimlari": {
        "uz": "Aqlli yoritish (Smart Lighting) tizimlari",
        "ru": "–£–º–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ (Smart Lighting)",
    },
    "aqlli_termostat_iqlim_nazarati_tizimlari": {
        "uz": "Aqlli termostat va iqlim nazarati",
        "ru": "–£–º–Ω—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç –∏ –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å",
    },
    "smart_lock_internet_orqali_boshqariladigan_eshik_qulfi_tizimlari": {
        "uz": "Smart Lock ‚Äî internet orqali boshqariladigan qulflar",
        "ru": "Smart Lock ‚Äî —É–º–Ω—ã–π –∑–∞–º–æ–∫ (—á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)",
    },
    "aqlli_rozetalar_energiya_monitoring_tizimlari": {
        "uz": "Aqlli rozetalar va energiya monitoringi",
        "ru": "–£–º–Ω—ã–µ —Ä–æ–∑–µ—Ç–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–Ω–µ—Ä–≥–∏–∏",
    },
    "uyni_masofadan_boshqarish_qurilmalari_yagona_uzim_orqali_boshqarish": {
        "uz": "Uyni masofadan boshqarish qurilmalari",
        "ru": "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ–º",
    },
    "aqlli_pardalari_jaluz_tizimlari": {
        "uz": "Aqlli pardalar va jaluzlar",
        "ru": "–£–º–Ω—ã–µ —à—Ç–æ—Ä—ã –∏ –∂–∞–ª—é–∑–∏",
    },
    "aqlli_malahiy_texnika_integratsiyasi": {
        "uz": "Aqlli maishiy texnika integratsiyasi",
        "ru": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–º–Ω–æ–π –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏",
    },
    # Security
    "videokuzatuv_kameralarini_ornatish_ip_va_analog": {
        "uz": "Videokuzatuv kameralarini o'rnatish (IP/analog)",
        "ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è (IP/–∞–Ω–∞–ª–æ–≥)",
    },
    "kamera_arxiv_tizimlari_bulutli_saqlash_xizmatlari": {
        "uz": "Kamera arxiv tizimlari, bulutli saqlash",
        "ru": "–ê—Ä—Ö–∏–≤ –∏ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ",
    },
    "domofon_tizimlari_ornatish": {
        "uz": "Domofon tizimlari",
        "ru": "–î–æ–º–æ—Ñ–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
    },
    "xavfsizlik_signalizatsiyasi_harakat_sensorlarini_ornatish": {
        "uz": "Xavfsizlik signalizatsiyasi va sensorlar",
        "ru": "–û—Ö—Ä–∞–Ω–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –¥–∞—Ç—á–∏–∫–∏",
    },
    "yong_signalizatsiyasi_tizimlari": {
        "uz": "Yong'in signalizatsiyasi tizimlari",
        "ru": "–ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
    },
    "gaz_sizish_sav_toshqinliqqa_qarshi_tizimlar": {
        "uz": "Gaz sizishi/suv toshqiniga qarshi tizimlar",
        "ru": "–°–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã –æ—Ç —É—Ç–µ—á–∫–∏ –≥–∞–∑–∞/–ø–æ—Ç–æ–ø–∞",
    },
    "yuzni_tanish_face_recognition_tizimlari": {
        "uz": "Yuzni tanish (Face Recognition) tizimlari",
        "ru": "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü (Face Recognition)",
    },
    "avtomatik_eshik_darvoza_boshqaruv_tizimlari": {
        "uz": "Avtomatik eshik/darvoza boshqaruvi",
        "ru": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–≤–µ—Ä–∏/–≤–æ—Ä–æ—Ç–∞",
    },
    # Internet
    "wi_fi_tarmoqlarini_ornatish_sozlash": {
        "uz": "Wi-Fi tarmoqlarini o'rnatish va sozlash",
        "ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Wi-Fi",
    },
    "wi_fi_qamrov_zonasini_kengaytirish_access_point": {
        "uz": "Wi-Fi qamrovini kengaytirish (Access Point)",
        "ru": "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è Wi-Fi (Access Point)",
    },
    "mobil_aloqa_signalini_kuchaytirish_repeater": {
        "uz": "Mobil aloqa signalini kuchaytirish (Repeater)",
        "ru": "–£—Å–∏–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤—è–∑–∏ (Repeater)",
    },
    "ofis_va_uy_uchun_lokal_tarmoq_lan_qurish": {
        "uz": "Ofis/uy uchun lokal tarmoq (LAN) qurish",
        "ru": "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (LAN)",
    },
    "internet_provayder_xizmatlarini_ulash": {
        "uz": "Internet provayder xizmatlarini ulash",
        "ru": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
    },
    "server_va_nas_qurilmalarini_ornatish": {
        "uz": "Server va NAS qurilmalarini o'rnatish",
        "ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ NAS",
    },
    "bulutli_fayl_almashish_zaxira_tizimlari": {
        "uz": "Bulutli fayl almashish va zaxira",
        "ru": "–û–±–º–µ–Ω —Ñ–∞–π–ª–∞–º–∏ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±–ª–∞–∫–µ",
    },
    "vpn_va_xavfsiz_internet_ulanishlarini_tashkil_qilish": {
        "uz": "VPN va xavfsiz ulanishlar",
        "ru": "VPN –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
    },
    # Energy
    "quyosh_panellarini_ornatish_ulash": {
        "uz": "Quyosh panellarini o'rnatish va ulash",
        "ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π",
    },
    "quyosh_batareyalari_orqali_energiya_saqlash_tizimlari": {
        "uz": "Quyosh batareyalari bilan energiya saqlash",
        "ru": "–•—Ä–∞–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ—è—Ö",
    },
    "shamol_generatorlarini_ornatish": {
        "uz": "Shamol generatorlarini o'rnatish",
        "ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤",
    },
    "elektr_energiyasini_tejovchi_yoritish_tizimlari": {
        "uz": "Energiya tejamkor yoritish tizimlari",
        "ru": "–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
    },
    "avtomatik_suv_orish_tizimlari_smart_irrigation": {
        "uz": "Avtomatik sug'orish (Smart Irrigation)",
        "ru": "–ê–≤—Ç–æ–ø–æ–ª–∏–≤ (Smart Irrigation)",
    },
    # Multimedia
    "smart_tv_ornatish_ulash": {
        "uz": "Smart TV o'rnatish va ulash",
        "ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Smart TV",
    },
    "uy_kinoteatri_tizimlari_ornatish": {
        "uz": "Uy kinoteatri tizimlari",
        "ru": "–î–æ–º–∞—à–Ω–∏–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
    },
    "audio_tizimlar_multiroom": {
        "uz": "Audio tizimlar (multiroom)",
        "ru": "–ê—É–¥–∏–æ—Å–∏—Å—Ç–µ–º—ã (multiroom)",
    },
    "ip_telefoniya_mini_ats_tizimlarini_tashkil_qilish": {
        "uz": "IP-telefoniya, mini-ATS",
        "ru": "IP-—Ç–µ–ª–µ—Ñ–æ–Ω–∏—è, –º–∏–Ω–∏-–ê–¢–°",
    },
    "video_konferensiya_tizimlari": {
        "uz": "Video konferensiya tizimlari",
        "ru": "–°–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π",
    },
    "interaktiv_taqdimot_tizimlari_proyektor_led_ekran": {
        "uz": "Interaktiv taqdimot (proyektor/LED)",
        "ru": "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (–ø—Ä–æ–µ–∫—Ç–æ—Ä/LED)",
    },
    # Special
    "aqlli_ofis_tizimlarini_ornatish": {
        "uz": "Aqlli ofis tizimlari",
        "ru": "–°–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–≥–æ –æ—Ñ–∏—Å–∞",
    },
    "data_markaz_server_room_loyihalash_montaj_qilish": {
        "uz": "Data-markaz (Server room) loyihalash va montaj",
        "ru": "–î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä (Server room): –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω—Ç–∞–∂",
    },
    "qurilma_tizimlar_uchun_texnik_xizmat_korsatish": {
        "uz": "Qurilma/tizimlar uchun texnik xizmat",
        "ru": "–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤/—Å–∏—Å—Ç–µ–º",
    },
    "dasturiy_taminotni_ornatish_yangilash": {
        "uz": "Dasturiy ta'minotni o'rnatish/yangilash",
        "ru": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û",
    },
    "iot_internet_of_things_qurilmalarini_integratsiya_qilish": {
        "uz": "IoT qurilmalarini integratsiya qilish",
        "ru": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è IoT-—É—Å—Ç—Ä–æ–π—Å—Ç–≤",
    },
    "qurilmalarni_masofadan_boshqarish_tizimlarini_sozlash": {
        "uz": "Masofaviy boshqaruv tizimlari",
        "ru": "–°–∏—Å—Ç–µ–º—ã —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    },
    "suniy_intellekt_asosidagi_uy_ofis_boshqaruv_tizimlari": {
        "uz": "Sun'iy intellekt asosidagi boshqaruv",
        "ru": "AI-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ–º/–æ—Ñ–∏—Å–æ–º",
    },
}

def service_type_name(lang: str, db_value: str) -> str:
    """Database service_type qiymatini tilga mos label ga aylantirish."""
    lang = normalize_lang(lang)
    data = SERVICE_TYPE_LABELS.get(db_value)
    if data:
        return data.get(lang) or data.get("uz")
    # fallback: kod -> Title Case
    return (db_value or "-").replace("_", " ").title()

def fmt_dt(dt: datetime) -> str:
    return dt.strftime("%d.%m.%Y %H:%M")

def esc(v) -> str:
    if v is None:
        return "-"
    return html.escape(str(v), quote=False)

async def _lang_from_db(telegram_id: int) -> str:
    """Foydalanuvchi tilini DB‚Äôdan oladi; bo‚Äòlmasa 'uz'."""
    user = await get_user_by_telegram_id(telegram_id)
    return normalize_lang((user or {}).get("language"))

# -----------------------------
# ü™ß Karta matni + klaviatura
# -----------------------------
def short_view_text(item: dict, index: int, total: int, lang: str) -> str:
    """
    Bitta arizaning karta ko‚Äòrinishini chiqaradi (tilga mos).
    Dinamik maydonlar HTML-escape qilinadi.
    """
    order_id = item["id"]
    # Bazadan application_number ni olamiz
    application_number = item.get("application_number")
    if application_number:
        formatted_order_id = application_number
    else:
        # Fallback: agar application_number yo'q bo'lsa, oddiy ID
        formatted_order_id = str(order_id)
    category = cat_name(lang, item.get("category") or "-")

    # Xizmat nomlarini database value dan tilga mos label ga aylantiramiz
    service_raw = item.get("service_type", "-") or "-"
    service_name = service_type_name(lang, service_raw)

    created = item.get("created_at")
    created_dt = datetime.fromisoformat(created) if isinstance(created, str) else created

    full_name = esc(item.get("full_name", "-"))
    phone = esc(item.get("phone", "-"))
    username_raw = item.get("username") or ""
    username = esc(username_raw) if username_raw else "-"
    address = esc(item.get("address", "-"))

    # Username har doim ko'rsatiladi (agar NULL bo'lsa "-")
    username_text = f"\n{t(lang,'username')} {'@' + username if username and username != '-' else '-'}"

    # GPS havola (raqamlar bo'lgani uchun escape shart emas)
    location_text = ""
    if item.get("latitude") and item.get("longitude"):
        lat = item["latitude"]
        lon = item["longitude"]
        location_text = f"\n{t(lang,'gps')} https://maps.google.com/?q={lat},{lon}"

    return (
        f"{t(lang,'title')}\n\n"
        f"{t(lang,'order')} {esc(formatted_order_id)}\n"
        f"{t(lang,'category')} {esc(category)}\n"
        f"{t(lang,'service')} {esc(service_name)}\n"
        f"{t(lang,'client')} {full_name}\n"
        f"{t(lang,'phone')} {phone}{username_text}\n"
        f"{t(lang,'address')} {address}{location_text}\n"
        f"{t(lang,'date')} {fmt_dt(created_dt)}\n"
        f"{t(lang,'item_idx')} {index + 1}/{total}"
    )

def nav_keyboard(index: int, total: int, lang: str) -> InlineKeyboardMarkup:
    """
    Navigatsiya klaviaturasi (Oldingi/Keyingi/Yopish) ‚Äî tilga mos.
    """
    rows = []
    nav_row = []
    if index > 0:
        nav_row.append(InlineKeyboardButton(text=t(lang, "prev"), callback_data=f"smart_prev_{index}"))
    if index < total - 1:
        nav_row.append(InlineKeyboardButton(text=t(lang, "next"), callback_data=f"smart_next_{index}"))
    if nav_row:
        rows.append(nav_row)

    rows.append([InlineKeyboardButton(text=t(lang, "close"), callback_data="smart_close")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# -----------------------------
# üì® Kirish (reply button)
# -----------------------------
@router.message(F.text.in_(["üõú SmartService arizalari", "üõú SmartService –∑–∞—è–≤–∫–∏"]))
async def open_smart_service_orders(message: Message, state: FSMContext):
    """
    Manager uchun SmartService arizalarini ochish:
      - user.language‚Äôni DB‚Äôdan oladi;
      - 50 ta yozuvni yuklaydi;
      - karta + navi klaviatura (UZ/RU).
    """
    user = await get_user_by_telegram_id(message.from_user.id)
    if not user or user.get("role") != "manager":
        return

    lang = normalize_lang(user.get("language"))
    items = await fetch_smart_service_orders(limit=50, offset=0)

    if not items:
        await message.answer(
            f"{t(lang,'empty_title')}\n\n{t(lang,'empty_body')}",
            parse_mode="HTML",
            reply_markup=get_manager_main_menu(lang)  # üîë menu ham tilga mos
        )
        return

    await state.update_data(smart_orders=items, idx=0)
    total = len(items)
    text = short_view_text(items[0], index=0, total=total, lang=lang)
    kb = nav_keyboard(0, total, lang)
    await message.answer(text, reply_markup=kb, parse_mode="HTML")

# -----------------------------
# ‚¨ÖÔ∏è Oldingi / ‚û°Ô∏è Keyingi
#  (har safar tilni DB‚Äôdan yangidan olamiz ‚Äî user tilni o‚Äòzgartirsa ham darhol aks etadi)
# -----------------------------
@router.callback_query(F.data.startswith("smart_prev_"))
async def prev_smart_order(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    lang = await _lang_from_db(cb.from_user.id)

    data = await state.get_data()
    items = data.get("smart_orders", []) or []
    total = len(items)
    idx = int(cb.data.replace("smart_prev_", "")) - 1

    if idx < 0 or idx >= total:
        return

    await state.update_data(idx=idx)
    text = short_view_text(items[idx], index=idx, total=total, lang=lang)
    kb = nav_keyboard(idx, total, lang)
    await cb.message.edit_text(text, reply_markup=kb, parse_mode="HTML")

@router.callback_query(F.data.startswith("smart_next_"))
async def next_smart_order(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    lang = await _lang_from_db(cb.from_user.id)

    data = await state.get_data()
    items = data.get("smart_orders", []) or []
    total = len(items)
    idx = int(cb.data.replace("smart_next_", "")) + 1

    if idx < 0 or idx >= total:
        return

    await state.update_data(idx=idx)
    text = short_view_text(items[idx], index=idx, total=total, lang=lang)
    kb = nav_keyboard(idx, total, lang)
    await cb.message.edit_text(text, reply_markup=kb, parse_mode="HTML")

# -----------------------------
# ‚ùå Yopish
# -----------------------------
@router.callback_query(F.data == "smart_close")
async def smart_close(cb: CallbackQuery, state: FSMContext):
    lang = await _lang_from_db(cb.from_user.id)
    await cb.answer(t(lang, "closed_toast"))
    try:
        await cb.message.delete()  # matn + tugmalarni o'chiradi
    except TelegramBadRequest:
        try:
            await cb.message.edit_reply_markup(reply_markup=None)
        except TelegramBadRequest:
            pass
    # ixtiyoriy: state tozalash
    await state.update_data(smart_orders=None, idx=None)

# (ixtiyoriy) Agar ro‚Äòyxatga qaytish tugmasi bo‚Äòlsa foydalanish mumkin
@router.callback_query(F.data.startswith("smart_back_"))
async def back_to_smart_list(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    lang = await _lang_from_db(cb.from_user.id)

    data = await state.get_data()
    items = data.get("smart_orders", []) or []
    idx = data.get("idx", 0) or 0

    if not items:
        await cb.message.edit_text(f"{t(lang,'empty_title')}\n\n{t(lang,'empty_body')}", parse_mode="HTML")
        return

    total = len(items)
    text = short_view_text(items[idx], index=idx, total=total, lang=lang)
    kb = nav_keyboard(idx, total, lang)
    await cb.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
